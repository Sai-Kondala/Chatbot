{
  "intents": [
    {
      "tag": "startup_message",
      "patterns": [
        "startup",
        "help",
        "what can you do",
        "startup message"
      ],
      "responses": [
        "Welcome to the Programming Helper Bot! I can help you with basic concepts in Python and Java. To see a full list of what I know, just ask 'what topics do you have?'"
      ]
    },
    {
      "tag": "topics_available",
      "patterns": [
        "topics you have",
        "topics",
        "what can you answer",
        "list all topics",
        "give me some example questions",
        "what can I ask",
        "suggest a question"
      ],
      "responses": [
        "Here are all the topics I can currently help you with:\n- Greeting\n- Goodbye\n- Thanks\n- Python Variables\n- Python Data Types\n- Python For Loops\n- Python Functions\n- Java Variables\n- Java Data Types\n- Java Methods\n- Java Classes & Objects"
      ]
    },
    {
      "tag": "greeting",
      "patterns": [
        "hi",
        "hey",
        "hello",
        "good day",
        "greetings",
        "is anyone there?",
        "what's up",
        "greeting"
      ],
      "responses": [
        "Hello! How can I help you with your Java or Python questions today?",
        "Hey there! Ready to tackle some programming concepts?",
        "Hi! What can I teach you about Java or Python?",
        "Greetings! Ask me anything about Java or Python. I'm ready to help."
      ]
    },
    {
      "tag": "goodbye",
      "patterns": [
        "bye",
        "see you later",
        "goodbye",
        "talk to you later",
        "I have to go",
        "that's all"
      ],
      "responses": [
        "Goodbye! Happy coding!",
        "See you later! Keep up the great learning.",
        "Bye! Don't hesitate to ask if you have more questions in the future.",
        "Talk to you later! Have a great day."
      ]
    },
    {
      "tag": "thanks",
      "patterns": [
        "thanks",
        "thank you",
        "that's helpful",
        "awesome, thanks",
        "great, thank you",
        "thanks a lot"
      ],
      "responses": [
        "You're very welcome!",
        "Happy to help! Is there anything else you'd like to know?",
        "Glad I could be of assistance.",
        "Anytime! Let me know if there's anything else."
      ]
    },
    {
      "tag": "python_variables",
      "patterns": [
        "python variables",
        "how to create variable in python",
        "declare python variable",
        "assign value in python"
      ],
      "responses": [
        "In Python, variables are like containers for storing data. Python uses dynamic typing, meaning you don't need to declare a variable's type. A variable is created the moment you first assign a value to it.\n\nFor example:\n```python\n# An integer variable\nx = 10\n\n# A string variable\nname = 'Alice'\n\n# The type can even be changed later\nx = 'Now I am a string'\n```"
      ]
    },
    {
      "tag": "python_data_types",
      "patterns": [
        "python data types",
        "basic types python",
        "what are python data types",
        "python list",
        "python dictionary",
        "python tuple",
        "python set"
      ],
      "responses": [
        "Python has several built-in data types. The most common are:\n- **Text:** `str` (e.g., 'Hello')\n- **Numeric:** `int` (e.g., 20), `float` (e.g., 20.5)\n- **Sequence:** `list` (e.g., ['apple', 'banana']), `tuple`\n- **Mapping:** `dict` (e.g., {'name': 'John', 'age': 36})\n- **Set:** `set` (e.g., {'apple', 'banana'})\n- **Boolean:** `bool` (`True` or `False`)\n\nYou can check a variable's type with the `type()` function: `print(type('Hello'))` will output `<class 'str'>`."
      ]
    },
    {
      "tag": "python_for_loop",
      "patterns": [
        "python for loop",
        "for loop in python",
        "how to write a for loop python",
        "iterate over a list in python",
        "python loop through list",
        "explain for loops python",
        "how do for loops work in python"
      ],
      "responses": [
        "In Python, a 'for' loop is used for iterating over a sequence (like a list, tuple, or string). The basic syntax is: `for item in sequence:`",
        "Here is a simple example that prints numbers 0 to 4:\n```python\nfor i in range(5):\n    print(i)\n```",
        "To loop over a list, you can do this:\n```python\nmy_list = ['apple', 'banana', 'cherry']\nfor fruit in my_list:\n    print(fruit)\n```"
      ]
    },
    {
      "tag": "python_functions",
      "patterns": [
        "python function",
        "define a function in python",
        "how to create python functions",
        "python def keyword",
        "call a function python"
      ],
      "responses": [
        "Functions in Python are defined using the `def` keyword, followed by the function name and parentheses `()`. The code block within every function starts with a colon `:` and is indented.",
        "Here is how you define a simple function:\n```python\ndef greet():\n    print(\"Hello from a function!\")\n```",
        "To call the function, you just use its name followed by parentheses:\n```python\ngreet() # This will print \"Hello from a function!\"\n```",
        "You can also pass data, known as parameters, into a function:\n```python\ndef greet_person(name):\n    print(f\"Hello, {name}!\")\n\ngreet_person(\"Alice\") # Prints \"Hello, Alice!\"\n```"
      ]
    },
    {
      "tag": "java_variables",
      "patterns": [
        "java variables",
        "declare variable in java",
        "java integer variable",
        "java string variable",
        "how to make a variable in java",
        "explain java variables"
      ],
      "responses": [
        "In Java, variables must be declared with a specific data type because it is a statically-typed language. This helps prevent errors. The syntax is `type variableName = value;`.\n\nFor example:\n```java\n// An integer variable for whole numbers\nint age = 25;\n\n// A String variable for text (String is a class)\nString name = \"Alice\";\n\n// A double for numbers with decimal points\ndouble salary = 65000.50;\n```"
      ]
    },
     {
      "tag": "java_data_types",
      "patterns": [
        "java data types",
        "primitive types java",
        "what are java data types",
        "java int vs double",
        "java array"
      ],
      "responses": [
        "Java data types are split into two groups:\n\n1.  **Primitive Types:** These are the fundamental types. There are 8: `byte`, `short`, `int`, `long`, `float`, `double`, `boolean`, and `char`.\n\n2.  **Non-Primitive Types (Reference Types):** These refer to objects. Examples include `String`, `Arrays`, and any `Class` you create.\n\nHere's an example:\n```java\n// Primitive types\nint num = 10;\nboolean flag = true;\n\n// Non-primitive type\nString greeting = \"Hello\";\n```"
      ]
    },
    {
      "tag": "java_methods",
      "patterns": [
        "java method",
        "what is a method in java",
        "create a java method",
        "how to call a method in java",
        "explain java methods"
      ],
      "responses": [
        "A method in Java is a block of code that runs only when it is called. It's similar to a function in other languages. You can pass data, known as parameters, into a method.",
        "Here is how you define a simple method within a class:\n```java\npublic class Main {\n  static void myMethod() {\n    System.out.println(\"Hello from myMethod!\");\n  }\n}\n```",
        "To call the method, you use its name followed by parentheses and a semicolon:\n```java\nmyMethod(); // This will print \"Hello from myMethod!\"\n```"
      ]
    },
    {
      "tag": "java_classes_objects",
      "patterns": [
        "java class",
        "java object",
        "what is a class in java",
        "explain java objects",
        "class vs object in java"
      ],
      "responses": [
        "Java is an object-oriented programming language. Everything in Java is associated with classes and objects.",
        "A Class is like a blueprint for creating objects. For example, you could have a `Car` class with variables like `color` and `model`.",
        "An Object is an instance of a class. From the `Car` class blueprint, you could create actual car objects, like a red Ford or a blue Honda.",
        "Here is a simple example:\n```java\n// This is the class (blueprint)\npublic class Car {\n  String color = \"red\";\n}\n\n// To create an object from the class:\nCar myCar = new Car();\nSystem.out.println(myCar.color); // Prints \"red\"\n```"
      ]
    },
    {
      "tag": "fallback",
      "patterns": ["a", "b", "c"],
      "responses": [
        "I'm sorry, I don't have information on that specific topic yet. You can try asking about topics like 'python for loop', 'java variables', or 'python functions'."
      ]
    }
  ]
}
